name: Talos MCP Server CI/CD

on:
  push:
    branches: [main, 'fix/**', 'feature/**']
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RUST_STABLE_VERSION: stable

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Change detection job
  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs['rust'] }}
      docker: ${{ steps.filter.outputs['docker'] }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            rust:
              - 'src/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
            docker:
              - 'Dockerfile'
              - '.dockerignore'

  # Version determination
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-release: ${{ steps.version.outputs.is-release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is-release=true" >> $GITHUB_OUTPUT
          else
            # Use commit SHA for non-release builds
            VERSION="main-$(git rev-parse --short HEAD)"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is-release=false" >> $GITHUB_OUTPUT
          fi

  # Parallel linting and testing
  lint-rust:
    needs: changes
    if: >-
      always() && (needs.changes.outputs.rust == 'true' ||
      github.event_name == 'push')
    runs-on: ubuntu-latest
    outputs:
      format-needed: ${{ steps.format-check.outputs['format-needed'] }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust environment
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-talos-mcp"
          cache-targets: true

      - name: Check formatting
        id: format-check
        run: |
          if ! cargo fmt --all -- --check; then
            echo "format-needed=true" >> $GITHUB_OUTPUT
            echo "‚ùå Code formatting issues detected"
            echo "FORMATTING_FAILED=true" >> $GITHUB_ENV
          else
            echo "format-needed=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Code formatting is correct"
            echo "FORMATTING_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Fail job if formatting issues detected and not on push event
        if: steps.format-check.outputs['format-needed'] == 'true' && github.event_name != 'push'
        run: |
          echo "‚ùå Formatting issues detected and auto-format is not available (not a push event)"
          exit 1

      - name: Run Clippy
        if: steps.format-check.outputs['format-needed'] == 'false' || github.event_name == 'push'
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Auto-format job that runs when formatting fails
  auto-format:
    needs: [changes, lint-rust]
    if: always() && needs.lint-rust.outputs['format-needed'] == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Setup Rust environment
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Auto-format Rust code
        run: |
          echo "üîß Auto-formatting Rust code..."
          cargo fmt --all

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "No changes after formatting"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected after formatting"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.changes.outputs['has-changes'] == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "üîß Auto-format Rust code

          This commit was automatically generated by the CI/CD pipeline
          to fix formatting issues detected by cargo fmt.

          Changes made:
          - Applied cargo fmt --all to fix formatting

          [skip ci]"
          git push

  # Re-run lint after auto-format (only if auto-format ran)
  lint-rust-retry:
    needs: [changes, auto-format]
    if: always() && needs.auto-format.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Rust environment
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-talos-mcp"
          cache-targets: true

      - name: Verify formatting is now correct
        run: |
          echo "üîç Verifying formatting after auto-format..."
          cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test-rust:
    needs: changes
    if: always() && (needs.changes.outputs.rust == 'true' || github.event_name == 'push')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-talos-mcp"
          cache-targets: true

      - name: Run tests
        run: cargo test --all-features --all-targets

  # Security scanning (non-blocking)
  security-scan:
    needs: changes
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      # Cache Trivy DB
      - name: Cache Trivy database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          cache-dir: ~/.cache/trivy

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif

      # Cache cargo-audit binary
      - name: Cache cargo-audit
        uses: actions/cache@v4
        id: cargo-audit-cache
        with:
          path: ~/.cargo/bin/cargo-audit
          key: cargo-audit-${{ runner.os }}-0.21.2

      - name: Install cargo-audit
        if: steps.cargo-audit-cache.outputs.cache-hit != 'true'
        run: cargo install cargo-audit --version 0.21.2

      - name: Rust security audit
        run: cargo audit || true

  # Build binaries for multiple platforms
  build-binaries:
    needs: [version, changes]
    if: always() && !cancelled() && (needs.changes.outputs.rust == 'true' || github.event_name == 'push')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: talos-mcp-server-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: talos-mcp-server-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: talos-mcp-server-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: talos-mcp-server-windows-x86_64
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust environment
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-talos-mcp"
          cache-targets: true

      - name: Setup cross-compilation tools
        if: matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          echo "üîß Setting up cross-compilation for ${{ matrix.target }}..."
          rustup target add ${{ matrix.target }}

      - name: Build binary
        run: |
          echo "üèóÔ∏è Building talos-mcp-server for ${{ matrix.target }}..."
          cargo build --release --target ${{ matrix.target }}

      - name: Create binary archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/talos-mcp-server dist/
          cp README.md dist/ || echo "No README.md found"
          cp LICENSE dist/ || echo "No LICENSE found"
          cd dist
          tar czf ../talos-mcp-server-${{ matrix.target }}.tar.gz *
          cd ..

      - name: Create binary archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item "target\${{ matrix.target }}\release\talos-mcp-server.exe" "dist\"
          if (Test-Path "README.md") { Copy-Item "README.md" "dist\" }
          if (Test-Path "LICENSE") { Copy-Item "LICENSE" "dist\" }
          Set-Location dist
          tar czf ..\talos-mcp-server-${{ matrix.target }}.tar.gz *
          Set-Location ..

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: talos-mcp-server-${{ matrix.target }}.tar.gz

  # Build Docker image
  build-docker:
    needs: [version, changes, build-binaries]
    if: always() && !cancelled() && (needs.changes.outputs.docker == 'true' || github.event_name == 'push')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: talos-mcp-server-linux-x86_64
          path: ./artifacts

      - name: Extract binary
        run: |
          cd artifacts
          tar -xzf talos-mcp-server-x86_64-unknown-linux-gnu.tar.gz
          mv talos-mcp-server ../talos-mcp-server-linux
          chmod +x ../talos-mcp-server-linux

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Create GitHub Release (only for tags)
  create-release:
    needs: [version, build-binaries, build-docker]
    if: needs.version.outputs.is-release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release notes
        id: release-notes
        run: |
          cat > release-notes.md << 'EOF'
          ## Talos MCP Server ${{ needs.version.outputs.version }}

          A Model Context Protocol (MCP) server for managing Talos OS clusters through LLM interfaces.

          ### üì• Installation

          #### Quick Install (Recommended)
          ```bash
          # Download the appropriate binary for your platform
          curl -L -o talos-mcp-server.tar.gz https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.version }}/talos-mcp-server-[platform].tar.gz
          tar -xzf talos-mcp-server.tar.gz
          chmod +x talos-mcp-server
          sudo mv talos-mcp-server /usr/local/bin/
          ```

          #### Platform Downloads
          | Platform | Architecture | Download |
          |----------|--------------|----------|
          | Linux | x64 | [talos-mcp-server-x86_64-unknown-linux-gnu.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.version }}/talos-mcp-server-x86_64-unknown-linux-gnu.tar.gz) |
          | macOS | Intel | [talos-mcp-server-x86_64-apple-darwin.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.version }}/talos-mcp-server-x86_64-apple-darwin.tar.gz) |
          | macOS | Apple Silicon | [talos-mcp-server-aarch64-apple-darwin.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.version }}/talos-mcp-server-aarch64-apple-darwin.tar.gz) |
          | Windows | x64 | [talos-mcp-server-x86_64-pc-windows-msvc.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.version }}/talos-mcp-server-x86_64-pc-windows-msvc.tar.gz) |

          ### üöÄ Quick Start

          1. **Set up Talos configuration:**
             ```bash
             export TALOSCONFIG=~/.talos/config
             ```

          2. **Start the MCP server:**
             ```bash
             talos-mcp-server
             ```

          3. **Connect from an MCP client (like Claude Desktop):**
             The server communicates over stdio using the MCP protocol.

          ### üê≥ Docker Image
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ needs.version.outputs.version }}

          # Run with Talos config mounted
          docker run -v ~/.talos:/root/.talos \
            -e TALOSCONFIG=/root/.talos/config \
            ghcr.io/${{ github.repository }}:${{ needs.version.outputs.version }}
          ```

          ### üõ†Ô∏è Available Tools
          The server exposes 37 tools for managing Talos clusters, including:
          - Container management (list, stats)
          - Node operations (health, version, logs)
          - Configuration management
          - Network monitoring
          - etcd management
          - And many more!

          ### üìö Documentation
          - [README](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [Talos MCP Documentation](https://github.com/${{ github.repository }}/blob/main/CLAUDE.md)

          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Talos MCP Server ${{ needs.version.outputs.version }}"
          tag_name: ${{ needs.version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/*/talos-mcp-server-*.tar.gz
          generate_release_notes: true

  # Build summary
  build-summary:
    needs: [version, build-binaries, build-docker, security-scan, create-release]
    if: always() && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "üéâ Build summary for Talos MCP Server ${{ needs.version.outputs.version }}"
          echo ""
          echo "## Artifacts Built:"
          echo "- ‚úÖ Binary artifacts: ${{ needs.build-binaries.result }}"
          echo "- ‚úÖ Docker image: ${{ needs.build-docker.result }}"
          echo ""
          echo "## Quality Checks:"
          echo "- üìä Security scan: ${{ needs.security-scan.result }}"
          echo ""
          echo "## Release:"
          echo "- üìã GitHub Release: ${{ needs.create-release.result }}"
          echo ""
          echo "## Container Image:"
          echo "- ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.version }}"
          echo ""
          echo "Available platforms: Linux x64, macOS Intel, macOS Apple Silicon, Windows x64"